#!/usr/bin/env bash

set -x

NC='\033[0m' # No Color
RED='\033[0;91m' # Red color
GREEN='\033[0;32m' # Green color
YELLOW='\033[0;33m' # Yellow color

main() {
  local arg
  arg="$1"

  case ${arg} in
    -h|--help)
      show_help
      exit
      ;;
    *)
      [ $EUID -ne 0 ] && \
        echo -e "${RED}==>${NC} Please run booster-um as ${RED}root${NC}." >&2 && exit 1
      ;;
  esac

  local esp_path
  esp_path="$(bootctl --print-esp-path)"

  # Common paths
  CMDLINE=/etc/kernel/cmdline
  EFI_DIR="${esp_path}/EFI/Linux"
  SPLASH=/usr/share/systemd/bootctl/splash-arch.bmp

  # Find out all installed kernel
  kernels=()
  readarray -t -O "${#kernels[@]}" kernels < <(find /usr/lib/modules \
    -maxdepth 1 \
    ! -path '*/\.*' -type d \
    ! -name 'modules' \
    -exec sh -c 'for path; do if pacman -Qqo "$path/pkgbase" > /dev/null 2>&1; then echo $path; fi; done' _ {} +)

  # Generate array of valid kernel package names
  readarray -t pkgbases < <(printf '%s/pkgbase\n' "${kernels[@]}" | xargs -I {} cat {})

  # Trigger any potential automounts
  stat -- /boot "$esp_path" &>/dev/null || :

  case "${arg}" in
    -g)
      # Generate UKI file for specified kernel package name
      _generate_kernel_uki "$2"
      ;;
    -r)
      # Remove UKI file for specified kernel package name
      _remove_uki "$2"
      ;;
    -G)
      # Generate UKI files for all kernels
      _generate_all_files "$2"
      ;;
    -R)
      # Remove booster*, vmlinuz* and UKI files for all installed kernels
      # -F argument removes mentioned files + other initramfs* files and whole esp/EFI/Linux dir
      _remove_all_files "$2"
      ;;
    -u)
      # Generate UKI on kernel update
      # Do not sign the UKI file if it exists in the sbctl database
      _generate_uki "$2" "$3" .
      ;;
    *)
      echo -e "${RED}==>${NC} Unknown parameter '$arg' passed."
      show_help >&2 && exit 1
      ;;
  esac
}

show_help() {
local command_name="${0##*/}"
cat << EOF
Usage: $command_name [OPTIONS] <package>

Generate or remove booster UKI files.

Help Options:
    -h, --help  Show this help message

Generate options:
    -g package  generate UKI file for specified kernel package name
    -G          generate UKI files for all installed kernels

Remove options:
    -r package  remove UKI file for specified kernel package name
    -R          remove all known booster-*, vmlinuz-* files from /boot and all known files from esp/EFI/Linux dir
    -R -F       remove all mentioned files + other initramfs* files from /boot and whole esp/EFI/Linux dir

Examples: $command_name -g linux
          $command_name -r linux
          $command_name -G
          $command_name -R
          $command_name -R -F
EOF
}

_sbctl_exists() {
  command -v -- sbctl > /dev/null 2>&1
}

_check_pkgbase() {
  local pkgbase="$1"
  if ( ! pacman -Qq -- "${pkgbase}" > /dev/null 2>&1 ) || [[ -z "${pkgbase}" ]]; then
    echo -e "${RED}Invalid package name.${NC}" && exit 1
  fi

  if ! printf '%s\0' "${pkgbases[@]}" | grep -Fxqz -- "$pkgbase"; then
    echo -e "${RED}Invalid kernel package name.${NC}" && exit 1
  fi
}

# Generate
_generate_uki() {
  # pkgbase
  local pkgbase="$1"
  _check_pkgbase "$pkgbase"

  local uname="$2"
  local sign="$3"

  # systemd-ukify paths
  local UCODE VMLINUZ INITRAMFS UKI

  # ucode
  mapfile -d '' ucodes < <(find /boot -name '*-ucode.img' -type f -print0)
  [[ ${#ucodes[@]} -gt 1 ]] && echo "${RED}==>${NC} Mutlitple microcode images detected, please use one!" && exit 1
  UCODE="${ucodes[0]}"

  # vmlinuz
  VMLINUZ="/boot/vmlinuz-${pkgbase}"
  [[ ! -e "$VMLINUZ" ]] && {
    echo -e "${RED}==>${NC} Unable to find compressed kernel image, ${RED}vmlinuz-${pkgbase}${NC}"
    echo -e "${RED}==>${NC} Regenerate kernel files with ${GREEN}booster-um -g ${pkgbase}${NC} or use ${GREEN}booster-um -G${NC} to regenerate files for all kernels"
  } && exit 1

  # initramfs
  INITRAMFS="/boot/booster-${pkgbase}.img"
  [[ ! -e "$INITRAMFS" ]] && echo -e "${RED}==>${NC} Unable to find ${RED}booster-${pkgbase}.img${NC}." && exit

  # cmdline
  [[ ! -e "$CMDLINE" ]] && touch "$CMDLINE"

  # UKI file path
  [[ ! -e "$EFI_DIR" ]] && mkdir -p "$EFI_DIR"
  UKI="${EFI_DIR}/arch-${pkgbase}.efi"

  /usr/lib/systemd/ukify build \
    --uname="${uname}" \
    --linux="${VMLINUZ}" ${UCODE:+"--initrd=$UCODE"} \
    --initrd="${INITRAMFS}" \
    --cmdline=@"${CMDLINE}" \
    --splash="${SPLASH}" \
    --output="${UKI}"

  # Remove the leftovers (vmlinuz and booster initramfs)
  rm -f "$VMLINUZ" "$INITRAMFS"

  # Retrun if sbctl is not installed
  if ! _sbctl_exists; then return; fi

  if [ "${sign:=-s}" != "-s" ]; then
    # Sbctl hook should sign the UKI file if it already exists in database
    if sbctl list-files --json | jq -r '.[].file' | grep -qw "$UKI"; then return; fi
  fi

  # Sign UKI file with sbctl
  sbctl sign --save "$UKI" || :
}

# Generates UKI file for specified kernel package name
_generate_kernel_uki() {
  local pkgbase="$1"
  _check_pkgbase "$pkgbase"

  local sign="$2"

  index="$(printf "%s\n" "${pkgbases[@]}" | grep -n "^${pkgbase}$" | sed "s/:${pkgbase}//")"
  local kernel="${kernels[$(($index-1))]}"
  local uname="${kernel##/usr/lib/modules/}"

  # Generate booster initramfs
  booster build --force --kernel-version "$uname" "/boot/booster-${pkgbase}.img"

  # Install the vmlinuz
  install -Dm644 "${kernel}/vmlinuz" "/boot/vmlinuz-${pkgbase}"

  # Generate and sign UKI file
  _generate_uki "$pkgbase" "$uname" "$sign"
}

# Generates UKI files for all installed kernels
_generate_all_uki() {
  local uname
  local sign="$1"
  for kernel in "${kernels[@]}"; do
    read -r pkgbase < "${kernel}/pkgbase"

    uname="${kernel##/usr/lib/modules/}"

    # Generate and sign UKI file
    _generate_uki "$pkgbase" "$uname" "$sign"
  done
}

# Generates booster initramfs, vmlinuz and UKI files for all kernels
_generate_all_files() {
  local sign="$1"
  echo -e "${YELLOW}==>${NC} Regenerating all booster and vmlinuz files..." >&2
  /usr/lib/booster/regenerate_images
  echo -e "${YELLOW}==>${NC} Regenerating all UKI files..." >&2
  _generate_all_uki "$sign"
}

# Removes sbctl file database completely
# Removes all known booster initramfs, vmlinuz and UKI files
# With -F argument it removes all initramfs-*, booster-*, vmlinuz-* files and esp/EFI/Linux dir
_remove_all_files() {
  local arg="$1"

  case "$arg" in
    -F)
      echo -e "${YELLOW}==> Removing all initramfs*, booster*, vmlinuz* files from /boot${NC}" >&2

      # Remove all initramfs-*, booster-*,	 vmlinuz-* files
      rm -f /boot/{initramfs,booster,vmlinuz}*

      # Remove esp/EFI/Linux dir all its files from the sbctl database
      _remove_efi_dir
      ;;
    "")
      echo -e "${YELLOW}==>${NC} Removing all known booster and vmlinuz files from /boot..." >&2

      # Remove all vmlinuz and initramfs
      rm -f /boot/{booster,vmlinuz}-*

      # Remove all known UKI files from esp/EFI/Linux dir
      _remove_all_uki
      ;;
    *)
      echo -e "${RED}==>${NC} Unknown parameter '$arg' passed."
      ;;
  esac
}

# Removes all known UKI files from esp/EFI/Linux dir
_remove_all_uki() {
  shopt -s nullglob

  echo -e "${YELLOW}==>${NC} Removing all known UKI files from ${EFI_DIR} dir...${NC}" >&2

  # Store all UKI files in array
  local uki_files=("${EFI_DIR}"/arch-*.efi)

  for uki_file in "${uki_files[@]}"; do
    rm -f "$uki_file"
    # Remove the UKI file from sbctl database
    if _sbctl_exists; then sbctl remove-file "$uki_file" || :; fi
  done

  shopt -u nullglob
}

# Removes esp/EFI/Linux dir all its files from the sbctl database
_remove_efi_dir() {
  shopt -s nullglob

  # Store all EFI files in array
  local efi_files=("${EFI_DIR}"/*.efi)

  if _sbctl_exists; then
    for efi_file in "${efi_files[@]}"; do
      # If EFI file exists in sbctl database, remove it
      if sbctl list-files --json | jq -r '.[].file' | grep -qw "$efi_file"; then
        # Remove EFI file from sbctl database
        sbctl remove-file "$efi_file" || :
      fi
    done
  fi

  echo -e "${YELLOW}==> Removing ${EFI_DIR} dir...${NC}" >&2

  # Remove esp/EFI/Linux dir
  rm -rf "$EFI_DIR"

  shopt -u nullglob
}

# Removes UKI file for specified kernel
_remove_uki() {
  local pkgbase="$1"
  _check_pkgbase "$pkgbase"

  # UKI file path
  local uki="${EFI_DIR}/arch-${pkgbase}.efi"

  # Remove UKI file
  rm -f "$uki"

  # Remove UKI file from sbctl database
  if _sbctl_exists; then sbctl remove-file "$uki" || :; fi
}

main "$@"; exit
