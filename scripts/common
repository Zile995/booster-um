#!/usr/bin/env bash

set -e

# Colors
W='\e[1;39m'   # White
R='\033[1;31m' # Red
G='\033[1;32m' # Green
B='\033[1;34m' # Blue
Y='\033[1;33m' # Yellow
NC='\033[0m'   # No color

# Common paths
CMDLINE=/etc/kernel/cmdline
SPLASH=/usr/share/systemd/bootctl/splash-arch.bmp

# Configs
CONFIG=/etc/booster-um.yaml
BOOSTER_CONFIG=/etc/booster.yaml

# Checks if specified command exists
_command_exists() {
  command -v -- "$1" > /dev/null 2>&1
}

# Gets the index for the specified element in array
_get_array_index() {
  local index=0
  local -n array="$1"
  local search="$2"
  index="$(printf "%s\n" "${array[@]}" | grep -n "^${search}$" | sed "s/:${search}//")"
  echo "$((index-1))"
}

# Checks if the package name is actually a kernel package name
_check_pkgbase() {
  local pkgbase="$1"
  if ! printf '%s\0' "${pkgbases[@]}" | grep -Fqxz -- "$pkgbase"; then
    echo -e "${R}Invalid kernel package name.${NC}" >&2 && exit 1
  fi
}

# Find out all package names of installed kernels
_find_kernels() {
  kernels=()
  readarray -t -O "${#kernels[@]}" kernels < <(find /usr/lib/modules \
    -maxdepth 1 \
    ! -path '*/\.*' -type d \
    ! -name 'modules' \
    -exec sh -c 'for path; do if pacman -Qqo -- "$path/pkgbase" > /dev/null 2>&1; then echo $path; fi; done' _ {} +)

  # Generate array of valid kernel package names
  readarray -t pkgbases < <(printf '%s/pkgbase\n' "${kernels[@]}" | xargs -I {} cat {})
}

# Sets EFI dir path
_set_efi_path() {
  local esp_path boot_path
  esp_path="$(bootctl -p)"
  boot_path="$(bootctl -x)"

  ESP_MOUNT="$esp_path"

  if [ "$esp_path" != "$boot_path" ]; then
    local boot_partition part_guid xbootldr_guid
    xbootldr_guid="bc13c2ff-59e6-4262-a352-b275fd6f7172"
    boot_partition="$(findmnt --real -nreo source "${boot_path}")"
    part_guid="$(partx -g -o TYPE "${boot_partition}")"

    if [[ "$part_guid" == "$xbootldr_guid" ]]; then
      ESP_MOUNT="$boot_path"
    fi
  fi

  EFI_DIR="${ESP_MOUNT}/EFI/Linux"
}
