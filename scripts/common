#!/usr/bin/env bash

set -e

# Colors
W='\e[1;39m'   # White
R='\033[1;31m' # Red
G='\033[1;32m' # Green
B='\033[1;34m' # Blue
Y='\033[1;33m' # Yellow
NC='\033[0m'   # No color

# Associative array with the kernel package name as the key and uname as the value
declare -A kernels

# An array of sorted pkgbases
declare -a sorted_pkgbases=()

# Checks if specified command exists
_command_exists() {
  command -v -- "$1" > /dev/null 2>&1
}

# Checks if the pkgbase exists
_pkgbase_exists() {
  local pkgbase="$1"
  [[ -v kernels[$pkgbase] ]]
}

# Checks if the package name is actually a kernel package name
_check_pkgbase() {
  local pkgbase="$1"
  if ! _pkgbase_exists "$pkgbase"; then
    echo -e "${R}Invalid kernel package name.${NC}" >&2 && exit 1
  fi
}

# Find out all package names of installed kernels
_find_kernels() {
  local pkgbase uname
  local -a kernel_paths=()

  # Find all kernel paths
  # Example: /usr/lib/modules/6.6.10-arch1-1
  readarray -t -O "${#kernel_paths[@]}" kernel_paths < <(find /usr/lib/modules \
    -maxdepth 1 ! -path '*/\.*' -type d ! -name 'modules' \
    -exec sh -c 'for path; do if pacman -Qqo -- "$path/pkgbase" > /dev/null 2>&1; then echo $path; fi; done' _ {} +)

  # Fill the kernels array
  for kernel_path in "${kernel_paths[@]}"; do
    # Save the key and values to the associative array
    read -r pkgbase < "${kernel_path}/pkgbase"
    uname="${kernel_path##/usr/lib/modules/}"
    kernels["$pkgbase"]="$uname"
  done

  # Do not sort pkgbases if the kernels array is empty or has only one item
  [[ ${#kernels[@]} -eq 0 ]] && return
  [[ ${#kernels[@]} -eq 1 ]] && sorted_pkgbases=("${!kernels[@]}") && return

  # Sort the pkgbase keys
  readarray -t sorted_pkgbases < <(printf '%s\n' "${!kernels[@]}" | sort -n)
}