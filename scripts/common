#!/usr/bin/env bash

set -e

# Colors
W='\e[1;39m'   # White
R='\033[1;31m' # Red
G='\033[1;32m' # Green
B='\033[1;34m' # Blue
Y='\033[1;33m' # Yellow
NC='\033[0m'   # No color

# Associative array with the kernel package name as the key and uname as the value
declare -A kernels

# An array of sorted pkgbases
declare -a sorted_pkgbases=()

# Control divider printing
declare -g divider

# Prints the divider (50 '-' chars in a row)
_print_divider() {
  (( ${divider:-0} )) ||
    echo "$(printf '%.0s-' {1..50})"
}

# Prints the message
# Args:
# $1: Message type: info, warn, error, success or message text
# $2: Header type: h1, h2 or message text
# $3: Message text
_msg() {
  local msg_color
  local msg_sign
  local message="$3"

  case "$1" in
    info) msg_color="${B}" ;;
    warn) msg_color="${Y}" ;;
    error) msg_color="${R}" ;;
    success) msg_color="${G}" ;;
    *) msg_color="${NC}" && message=$1 ;;
  esac

  case "$2" in
    h1) msg_sign="::"; message="${W}${message}" ;;
    h2) msg_sign="==>" ;;
    *|"")
      msg_sign="->"
      message="${2:-$message}" && local msg_indent=0
      ;;
  esac

  local message="${msg_color}${msg_sign}${NC} ${message}${NC}"

  (( ${msg_indent:-1} )) &&
    echo -e "$message" ||
    echo -e "$message" | nl -bn -w1
}

# _msg functions
# Info
_msg_info='_msg info'
_msg_h1_info='_msg info h1'
_msg_h2_info='_msg info h2'
# Warn
_msg_warn='_msg warn'
_msg_h1_warn='_msg warn h1'
_msg_h2_warn='_msg warn h2'
# Error && success
_msg_error='_msg error h2'
_msg_success='_msg success h2'

# Checks if specified command exists
_command_exists() {
  command -v -- "$1" > /dev/null 2>&1
}

# Checks if the pkgbase exists
_pkgbase_exists() {
  local pkgbase="$1"
  [[ -v kernels[$pkgbase] ]]
}

# Checks if the package name is actually a kernel package name
_check_pkgbase() {
  local pkgbase="$1"
  if ! _pkgbase_exists "$pkgbase"; then
    $_msg_error "${R}Invalid kernel package name: ${pkgbase}" && return 1
  fi
}

# Find out all package names of installed kernels
_find_kernels() {
  local pkgbase uname
  local -a kernel_paths=()

  # Find all kernel paths
  # Example: /usr/lib/modules/6.6.10-arch1-1
  readarray -t -O "${#kernel_paths[@]}" kernel_paths < <(find /usr/lib/modules \
    -maxdepth 1 ! -path '*/\.*' -type d ! -name 'modules' \
    -exec sh -c 'for path; do if pacman -Qqo -- "$path/pkgbase" > /dev/null 2>&1; then echo $path; fi; done' _ {} +)

  # Fill the kernels array
  for kernel_path in "${kernel_paths[@]}"; do
    # Save the key and values to the associative array
    read -r pkgbase < "${kernel_path}/pkgbase"
    uname="${kernel_path##/usr/lib/modules/}"
    kernels["$pkgbase"]="$uname"
  done

  # Do not sort pkgbases if the kernels array is empty or has only one item
  [[ ${#kernels[@]} -eq 0 ]] && return
  [[ ${#kernels[@]} -eq 1 ]] && sorted_pkgbases=("${!kernels[@]}") && return

  # Sort the pkgbase keys
  readarray -t sorted_pkgbases < <(printf '%s\n' "${!kernels[@]}" | sort)
}