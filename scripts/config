#!/usr/bin/env bash

set -e

# Disable sbsign by default
declare -g SBSIGN=1

# A value of 0 means that the booster-um config is valid
declare -g CONFIG_VALID=0

# Array with initramfs configs
declare -A initramfs_config

# Configs
declare -g CONFIG=/etc/booster-um.yaml
declare -g BOOSTER_CONFIG=/etc/booster.yaml

# Checks if booster-um.yaml config is valid
_check_config() {
  [[ ! -e $CONFIG ]] && CONFIG_VALID=$((1-$?)) && return

  if [[ ! -s $CONFIG ]]; then
    CONFIG_VALID=1
  else
    CONFIG_VALID=$(yq --exit-status "$CONFIG" &>/dev/null; echo "$?")
    if [[ $CONFIG_VALID -ne 0 ]]; then
      echo -e "${R}==>${NC} ${Y}$CONFIG${NC} config ${R}is not valid${NC}. ${Y}Default${NC} settings are used."
    fi
  fi

  _set_signing_tool
}

_set_signing_tool() {
  [[ $CONFIG_VALID -eq 1 ]] && return
  if _command_exists sbsign && yq '.sbsign == true' "$CONFIG" | grep -Fqwx -- 'true'; then SBSIGN=0; fi
}

# Checks if the creation of universal images is enabled
_is_universal() {
  [[ $CONFIG_VALID -eq 1 ]] && return 1
  yq '.universal == true' "$BOOSTER_CONFIG" | grep -Fqwx -- 'true'
}

# Checks if the booster-um should always generate a fallback UKI
_should_generate_fallback() {
  [[ -n $generate_fallback ]] && return $generate_fallback
  [[ $CONFIG_VALID -eq 1 ]] && generate_fallback=1 && return 1
  if yq '.generate_fallback == true' "$CONFIG" | grep -Fqwx -- 'true' && ! _is_universal; then
    generate_fallback=0 && return
  fi
  generate_fallback=1; false
}

# Checks if the booster-um should always sign generated UKI
_should_sign_uki() {
  [[ -n $sign_uki ]] && return $sign_uki
  [[ $CONFIG_VALID -eq 1 ]] && sign_uki=0 && return
  if ! yq '.sign_uki == false' "$CONFIG" | grep -Fqwx -- 'true'; then
   sign_uki=0 && return
  fi
  sign_uki=1; false
}

# Checks if the booster-um should remove leftovers (vmlinuz and initramfs)
_should_remove_leftovers() {
  [[ -n $remove_leftovers ]] && return $remove_leftovers
  [[ $CONFIG_VALID -eq 1 ]] && remove_leftovers=0 && return
  if ! yq '.remove_leftovers == false' "$CONFIG" | grep -Fqwx -- 'true'; then
    remove_leftovers=0 && return
  fi
  remove_leftovers=1; false
}

# Checks if the booster-um should create EFI entry
_should_create_efi_entry() {
  [[ -n $create_efi_entry ]] && return $create_efi_entry
  [[ $CONFIG_VALID -eq 1 ]] && create_efi_entry=1 && return 1
  if yq '.efistub == true' "$CONFIG" | grep -Fqwx -- 'true'; then
    create_efi_entry=0 && return
  fi
  create_efi_entry=1; false
}

# Get the default EFI entry
_get_default_entry() {
  local value="$(yq ".efistub_config.default_entry" "$CONFIG")"
  [[ $value == null ]] && return
  echo "$value"
}

# Checks if the booster-um should create EFI entry
_should_preserve_boot_order() {
  [[ -n $preserve_boot_order ]] && return $preserve_boot_order
  [[ $CONFIG_VALID -eq 1 ]] && preserve_boot_order=0 && return
  if ! yq '.efistub_config.preserve_boot_order == false' "$CONFIG" | grep -Fqwx -- 'true'; then
    preserve_boot_order=0 && return
  fi
  preserve_boot_order=1; false
}

_cmdline_per_kernel() {
  [[ -n $cmdline_per_kernel ]] && return $cmdline_per_kernel
  [[ $CONFIG_VALID -eq 1 ]] && cmdline_per_kernel=1 && return 1
  if yq '.cmdline_per_kernel == true' "$CONFIG" | grep -Fqwx -- 'true'; then
    cmdline_per_kernel=0 && return
  fi
  cmdline_per_kernel=1; false
}

# Returns the sbsign property value
_get_sbsign_property() {
  local property="$1"
  local value="$(yq ".sbsign_config.$property" "$CONFIG")"
  [[ $value == null ]] && return
  echo "$value"
}

# Checks if the splash file is a BMP file
_is_bmp() {
  local splash="$1"
  # If the the splash exists and is a BMP file, return
  if [[ -e $splash && $(file -b --mime-type "$splash") == 'image/bmp' ]]; then return; fi
  false
}

_has_default_initramfs() {
  local key="$1"
  [[ "${initramfs_config[$key]}" =~ "default" ]]
}

_has_fallback_initramfs() {
  local key="$1"
  [[ "${initramfs_config[$key]}" =~ "fallback" ]]
}

# Get the default initramfs types
_get_default_initramfs_types() {
  local -n initramfs_types="$1"
  readarray initramfs_types < <(yq ".initramfs_config.default_types[]" "$CONFIG");
  if [[ ! "${initramfs_types[*]}" =~ "default" && "${initramfs_types[*]}" =~ "fallback" ]] && ! _should_generate_fallback; then
    initramfs_types=(default)
  fi
  [[ ${#initramfs_types[@]} -eq 0 ]] && initramfs_types=(default fallback) || :
}

# Sets the initramfs config for all kernels
_set_initramfs_config() {
  local -a value=()
  for pkgbase in "${sorted_pkgbases[@]}"; do
    # Get the initramfs type array for specified kernel pkgbase
    readarray value < <(yq ".initramfs_config.${pkgbase}[]" "$CONFIG");

    # If fallback images should not be generated and there is only fallback type, create the default image
    if [[ ! "${value[*]}" =~ "default" && "${value[*]}" =~ "fallback" ]] && ! _should_generate_fallback; then
      value=(default)
    fi

    # If the kernel is not specified, use the value for other kernels
    [[ ${#value[@]} -eq 0 ]] && _get_default_initramfs_types value

    # Save the initramfs config for specified kernel pkgbase
    initramfs_config[$pkgbase]="${value[@]}"
  done
}

# Returns the splash file path
_get_splash_path() {
  # Set the default arch linux splash
  local default_splash=/usr/share/systemd/bootctl/splash-arch.bmp

  # If the config file doesn't exist or is not valid, use the default arch linux splash
  if [[ $CONFIG_VALID -eq 1 ]] && _is_bmp "$default_splash"; then
    echo "$default_splash" && return
  fi

  # Otherwise use the splash path from the config file
  local splash="$(yq '.splash' "$CONFIG")"

  # If splash path is not specified or does not exist, use the default arch linux splash
  if [[ $splash == null ]] || [[ ! -e $splash ]]; then
    splash="$default_splash"
  fi

  # Finally, return the splash path if the splash is a BMP file
  if _is_bmp "$splash"; then echo "$splash"; fi
}