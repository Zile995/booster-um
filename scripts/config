#!/usr/bin/env bash

set -e

# Disable sbsign by default
declare -g sbsign=0

# A value of 0 means that the booster-um config is valid
declare -g config_valid=0

# Configs
declare -g CONFIG=/etc/booster-um.yaml
declare -g BOOSTER_CONFIG=/etc/booster.yaml

# Checks if booster-um.yaml config is valid
_check_config() {
  [[ ! -e $CONFIG ]] && config_valid=$((1-$?)) && return

  if [[ ! -s $CONFIG ]]; then
    config_valid=1
  else
    config_valid=$(yq --exit-status "$CONFIG" &>/dev/null; echo "$?")
    if [[ $config_valid -ne 0 ]]; then
      echo -e "${R}==>${NC} ${Y}$CONFIG${NC} config ${R}is not valid${NC}. ${Y}Default${NC} settings are used."
    fi
  fi

  _set_signing_tool
}

_set_signing_tool() {
  [[ $config_valid -eq 1 ]] && return
  if _command_exists sbsign && yq '.sbsign == true' "$CONFIG" | grep -Fqwx -- 'true'; then sbsign=1; fi
}

# Checks if the creation of universal images is enabled
_is_universal() {
  [[ $config_valid -eq 1 ]] && return 1
  yq '.universal == true' "$BOOSTER_CONFIG" | grep -Fqwx -- 'true'
}

# Checks if the booster-um should always generate a fallback UKI
_should_generate_fallback() {
  [[ $config_valid -eq 1 ]] && return 1
  if yq '.generate_fallback == true' "$CONFIG" | grep -Fqwx -- 'true' && ! _is_universal; then return; fi
  false
}

# Checks if the booster-um should always sign generated UKI
_should_sign_uki() {
  [[ $config_valid -eq 1 ]] && return
  if ! yq '.sign_uki == false' "$CONFIG" | grep -Fqwx -- 'true'; then return; fi
  false
}

# Checks if the booster-um should remove leftovers (vmlinuz and initramfs)
_should_remove_leftovers() {
  [[ $config_valid -eq 1 ]] && return
  if ! yq '.remove_leftovers == false' "$CONFIG" | grep -Fqwx -- 'true'; then return; fi
  false
}

# Checks if the booster-um should create EFI entry
_should_create_efi_entry() {
  [[ $config_valid -eq 1 ]] && return 1
  if yq '.efistub == true' "$CONFIG" | grep -Fqwx -- 'true'; then return; fi
  false
}

# Checks if the booster-um should create EFI entry
_should_preserve_boot_order() {
  [[ $config_valid -eq 1 ]] && return
  if ! yq '.efistub_config.preserve_boot_order == false' "$CONFIG" | grep -Fqwx -- 'true'; then return; fi
  false
}

_cmdline_per_kernel() {
  [[ $config_valid -eq 1 ]] && return 1
  if yq '.cmdline_per_kernel == true' "$CONFIG" | grep -Fqwx -- 'true'; then return; fi
  false
}

# Returns the sbsign property value
_get_sbsign_property() {
  local property="$1"
  local value="$(yq ".sbsign_config.$property" "$CONFIG")"
  [[ $value == null ]] && return
  echo "$value"
}

# Checks if the splash file is a BMP file
_is_bmp() {
  local splash="$1"
  # If the the splash exists and is a BMP file, return
  if [[ -e $splash && $(file -b --mime-type "$splash") == 'image/bmp' ]]; then return; fi
  false
}

# Returns the splash file path
_get_splash_path() {
  # Set the default arch linux splash
  local default_splash=/usr/share/systemd/bootctl/splash-arch.bmp

  # If the config file doesn't exist or is not valid, use the default arch linux splash
  if [[ $config_valid -eq 1 ]] && _is_bmp "$default_splash"; then
    echo "$default_splash" && return
  fi

  # Otherwise use the splash path from the config file
  local splash="$(yq '.splash' "$CONFIG")"

  # If splash path is not specified or does not exist, use the default arch linux splash
  if [[ $splash == null ]] || [[ ! -e $splash ]]; then
    splash="$default_splash"
  fi

  # Finally, return the splash path if the splash is a BMP file
  if _is_bmp "$splash"; then echo "$splash"; fi
}
