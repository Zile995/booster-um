#!/usr/bin/env bash

set -e

# Disable sbsign by default
declare -g SBSIGN=1

# A value of 0 means that the booster-um config is valid
declare -g CONFIG_VALID=0

# Array with initramfs configs
declare -A initramfs_config

# Configs
declare -g CONFIG=/etc/booster-um.yaml
declare -g BOOSTER_CONFIG=/etc/booster.yaml

# Set the default Arch Linux splash
declare -g arch_splash=/usr/share/systemd/bootctl/splash-arch.bmp

# Checks if booster-um.yaml config is valid
_check_config() {
  [[ ! -e $CONFIG ]] && CONFIG_VALID=$((1-$?)) && return

  if [[ ! -s $CONFIG ]]; then
    CONFIG_VALID=1
  else
    CONFIG_VALID=$(yq --exit-status "$CONFIG" &>/dev/null; echo "$?")
    if (( $CONFIG_VALID )); then
      $_msg_error "${Y}$CONFIG${NC} config ${R}is not valid${NC}. ${Y}Default${NC} settings are used."
    fi
  fi

  _set_signing_tool
}

# Sets the default signing tool
_set_signing_tool() {
  (( $CONFIG_VALID )) && return
  if _command_exists sbsign && yq '.sbsign == true' "$CONFIG" | grep -Fqwx -- 'true'; then SBSIGN=0; fi
}

# Checks if the creation of universal images is enabled
_is_universal() {
  [[ $CONFIG_VALID -eq 1 ]] && return 1
  yq '.universal == true' "$BOOSTER_CONFIG" | grep -Fqwx -- 'true'
}

# Checks if the splash should be enabled
_should_enable_splash() {
  [[ -z $enable_splash ]] || return $enable_splash
  (( $CONFIG_VALID )) && enable_splash=0 && return
  if ! yq '.enable_splash == false' "$CONFIG" | grep -Fqwx -- 'true'; then
   enable_splash=0 && return
  fi
  enable_splash=1; false
}

# Checks if the booster-um should always generate a fallback UKI
_should_generate_fallback() {
  [[ -z $generate_fallback ]] || return $generate_fallback
  (( $CONFIG_VALID )) && generate_fallback=1 && return 1
  if yq '.generate_fallback == true' "$CONFIG" | grep -Fqwx -- 'true' && ! _is_universal; then
    generate_fallback=0 && return
  fi
  generate_fallback=1; false
}

# Checks if the booster-um should always sign generated UKI
_should_sign_uki() {
  [[ -z $sign_uki ]] || return $sign_uki
  (( $CONFIG_VALID )) && sign_uki=0 && return
  if ! yq '.sign_uki == false' "$CONFIG" | grep -Fqwx -- 'true'; then
   sign_uki=0 && return
  fi
  sign_uki=1; false
}

# Checks if the booster-um should remove leftovers (vmlinuz and initramfs)
_should_remove_leftovers() {
  [[ -z $remove_leftovers ]] || return $remove_leftovers
  (( $CONFIG_VALID )) && remove_leftovers=0 && return
  if ! yq '.remove_leftovers == false' "$CONFIG" | grep -Fqwx -- 'true'; then
    remove_leftovers=0 && return
  fi
  remove_leftovers=1; false
}

# Checks if the booster-um should create EFI entry
_should_create_efi_entry() {
  [[ -z $create_efi_entry ]] || return $create_efi_entry
  (( $CONFIG_VALID )) && create_efi_entry=1 && return 1
  if yq '.efistub == true' "$CONFIG" | grep -Fqwx -- 'true'; then
    create_efi_entry=0 && return
  fi
  create_efi_entry=1; false
}

# Returns the default EFI entry
_get_default_entry() {
  if [[ -n $default_entry ]]; then
    echo $default_entry 
    return
  fi
  if (( ${force_default_entry:-1} )); then
    default_entry="$(yq ".efistub_config.default_entry" "$CONFIG")"
  else
    default_entry="${sorted_pkgbases[0]}"
  fi
  [[ $default_entry == null ]] && return
  echo "$default_entry"
}

# Checks if the booster-um should append EFI entries to the boot order
_should_append_entries() {
  [[ -z $append_entries ]] || return $append_entries
  (( $CONFIG_VALID )) && append_entries=0 && return
  if ! yq '.efistub_config.append_entries == false' "$CONFIG" | grep -Fqwx -- 'true'; then
    append_entries=0 && return
  fi
  append_entries=1; false
}

# Returns the base cmdline
_get_config_cmdline() {
  if [[ -z $config_cmdline ]]; then
    config_cmdline="$(yq ".cmdline" "$CONFIG")"
    [[ $config_cmdline == null ]] && return
  fi
  echo "$config_cmdline"
}

# Returns the base fallback cmdline
_get_config_fallback_cmdline() {
  if [[ -z $config_fallback_cmdline ]]; then
    config_fallback_cmdline="$(yq ".fallback_cmdline" "$CONFIG")"
    [[ $config_fallback_cmdline == null ]] && return
  fi
  echo "$config_fallback_cmdline"
}

# Returns the pkgbase cmdline
_get_config_pkgbase_cmdline() {
  local pkgbase="$1"
  local config_pkgbase_cmdline="$(yq ".kernel_config.${pkgbase}.cmdline" "$CONFIG")"
  [[ $config_pkgbase_cmdline == null ]] && return
  echo "$config_pkgbase_cmdline"
}

# Returns the pkgbase fallback cmdline
_get_config_pkgbase_fallback_cmdline() {
  local pkgbase="$1"
  local config_pkgbase_fallback_cmdline="$(yq ".kernel_config.${pkgbase}.fallback_cmdline" "$CONFIG")"
  [[ $config_pkgbase_fallback_cmdline == null ]] && return
  echo "$config_pkgbase_fallback_cmdline"
}

# Checks if the default cmdline should be shared with pkgbase cmdlines
_should_share_default_cmdline() {
  [[ -z $share_default_cmdline ]] || return $share_default_cmdline
  (( $CONFIG_VALID )) && share_default_cmdline=1 && return 1
  if yq '.kernel_config.share_default_cmdline == true' "$CONFIG" | grep -Fqwx -- 'true'; then
    share_default_cmdline=0 && return
  fi
  share_default_cmdline=1; false
}

# Checks if the booster-um should create cmdline per kernel
_cmdline_per_kernel() {
  [[ -z $cmdline_per_kernel ]] || return $cmdline_per_kernel
  (( $CONFIG_VALID )) && cmdline_per_kernel=1 && return 1
  if yq '.kernel_config.cmdline_per_kernel == true' "$CONFIG" | grep -Fqwx -- 'true'; then
    cmdline_per_kernel=0 && return
  fi
  cmdline_per_kernel=1; false
}

# Returns the sbsign property value
_get_sbsign_property() {
  local property="$1"
  local value="$(yq ".sbsign_config.$property" "$CONFIG")"
  [[ $value == null ]] && return
  echo "$value"
}

# Checks if the splash file is a BMP file
_is_bmp() {
  local splash="$1"
  # If the the splash exists and is a BMP file, return
  if [[ -e $splash && $(file -b --mime-type "$splash") == 'image/bmp' ]]; then return; fi
  $_msg_warn "Splash file: $splash is not a bmp file." >&2; return 1
}

# Checks if pkgbase has default initramfs type
_has_default_initramfs() {
  local key="$1"
  [[ "${initramfs_config[$key]}" =~ "default" ]]
}

# Checks if pkgbase has fallback initramfs type
_has_fallback_initramfs() {
  local key="$1"
  [[ "${initramfs_config[$key]}" =~ "fallback" ]]
}

# Gets the default initramfs types
_get_default_initramfs_types() {
  local -n initramfs_types="$1"
  readarray initramfs_types < <(yq ".kernel_config.default_initramfs[]" "$CONFIG");
  if [[ ! "${initramfs_types[*]}" =~ "default" && "${initramfs_types[*]}" =~ "fallback" ]] && ! _should_generate_fallback; then
    initramfs_types=(default)
  fi
  [[ ${#initramfs_types[@]} -eq 0 ]] && initramfs_types=(default fallback) || :
}

# Sets the initramfs config for all kernels
_set_initramfs_config() {
  local -a value=()
  for pkgbase in "${sorted_pkgbases[@]}"; do
    # Get the initramfs type array for specified kernel pkgbase
    readarray value < <(yq ".kernel_config.${pkgbase}.initramfs[]" "$CONFIG");

    # If fallback images should not be generated and there is only fallback type, create the default image
    if [[ ! "${value[*]}" =~ "default" && "${value[*]}" =~ "fallback" ]] && ! _should_generate_fallback; then
      value=(default)
    fi

    # If the kernel is not specified, use the value for other kernels
    [[ ${#value[@]} -eq 0 ]] && _get_default_initramfs_types value

    # Save the initramfs config for specified kernel pkgbase
    initramfs_config[$pkgbase]="${value[@]}"
  done
}

# Returns the splash file path
_get_splash_path() {
  local splash
  local pkgbase="$1"

  # Return if splash should not be enabled
  _should_enable_splash || return 0

  # If the config file doesn't exist or is not valid, use the default arch linux splash
  if (( $CONFIG_VALID )); then echo "$arch_splash" && return; fi

  # Set the pkgbase splash path from the config file
  local pkgbase_splash="$(yq ".kernel_config.${pkgbase}.splash" "$CONFIG")"

  # Return if pkgbase splash is set to false
  if [[ $pkgbase_splash == "false" || -z $pkgbase_splash ]]; then
    return
  else
    splash="$pkgbase_splash"
  fi

  # If the pkgbase splash is empty, try the main splash path
  if [[ $pkgbase_splash == null ]]; then
    # Set the default splash path from the config file
    local default_splash="$(yq '.kernel_config.default_splash' "$CONFIG")"

    # Return if main splash is set to false
    if [[ $default_splash == "false" || -z $default_splash ]]; then
      return
    else
      splash=$default_splash
    fi

    # If splash path is not specified or does not exist, use the default arch linux splash
    if [[ $default_splash == null || ! -e $default_splash ]]; then splash="$arch_splash"; fi
  fi

  # Finally, return the splash path if the splash is a BMP file
  if _is_bmp "$splash"; then echo "$splash"; else echo "$arch_splash"; fi
}