#!/usr/bin/env bash

set -e

# EFI System Partition. Examples: /dev/nvme0n1p1, /dev/sda1
# UKI files will be created on this partition
declare -g ESP

# EFI dir path of the directory where the UKI files are located. Example: esp/EFI/Linux
declare -g EFI_DIR

# EFI System Partition mount point. Examples: /boot, /efi, /boot/efi
declare -g ESP_MOUNT

# EFI System Partition UUID
declare -g ESP_PARTUUID

# Boot order array
declare -a boot_order=()

# Sets EFI dir path
_set_efi_path() {
  local esp_path boot_path
  esp_path="$(bootctl -p)"
  boot_path="$(bootctl -x)"

  ESP_MOUNT="$esp_path"

  if [ "$esp_path" != "$boot_path" ]; then
    local boot_partition part_guid xbootldr_guid
    # XBOOTLDR GUID
    xbootldr_guid="bc13c2ff-59e6-4262-a352-b275fd6f7172"

    # BOOT partition. Example: /dev/nvme0n1p4
    boot_partition="$(findmnt --real -nreo source "${boot_path}")"

    # Partition GUID TYPE
    part_guid="$(partx -g -o TYPE "${boot_partition}")"

    # If boot partition has the XBOOTLDR GUID value, set the mount path
    if [[ "$part_guid" == "$xbootldr_guid" ]]; then
      ESP="$boot_partition"
      ESP_MOUNT="$boot_path"
    fi
  fi

  EFI_DIR="${ESP_MOUNT}/EFI/Linux"

  if [[ -z $ESP ]]; then
    ESP="$(findmnt --real -nreo source "${ESP_MOUNT}")"
  fi

  ESP_PARTUUID="$(partx -g -o UUID "$ESP")"

  # Trigger any potential automounts
  stat -- /boot /efi "$EFI_DIR" &>/dev/null || :
}

# Checks if efi entry exists
_efi_entry_exists() {
  local loader_path
  loader_path="$1"
  efibootmgr | grep -w "$ESP_PARTUUID" | grep -Fwq -e "${loader_path}" -e "${loader_path^^}"
}

# Extracts the pkgbase from known UKI file path
_get_pkgbase_from_path() {
  local uki pkgbase
  uki="$1"

  # Extract pkgbase from UKI file path
  pkgbase="${uki##*arch-}"
  pkgbase="${pkgbase%%.efi}"
  echo "$pkgbase"
}

# Formats the efi path to be readable by efibootmgr
_get_formatted_efi_path() {
  local efi
  efi="$1"

  # Set loader path wihout ESP mount point.
  efi_path="${efi#"$ESP_MOUNT"}"
  # Set loader path with backslashes
  efi_path="${efi_path//\//\\}"
  echo "$efi_path"
}

# Returns the EFI entry label
_get_label() {
  local pkgbase="$1"
  # Get OS NAME
  label="$(grep -Po '(?<=^NAME=").*(?=")' /etc/os-release)"
  # Set OS label to NAME + (pkgbase)
  label="${label} ($pkgbase)"
  echo "$label"
}

# Get the tmp file path
# This file contains the boot index
_get_tmp_index_file() {
  local uki="$1"
  uki="${uki#"$EFI_DIR"}"
  echo "/tmp${uki%.efi}.index"
}

# Preserves the old boot order
_preserve_boot_order() {
  if ! _should_preserve_boot_order; then return; fi

  # Get the boot order list
  readarray -d ',' boot_order < <(efibootmgr | grep -w "BootOrder" | sed -r 's/0+([0-9]+)/\1/g;s/BootOrder: //')

  # Do not change the boot order if there is only one entry or no entrties
  if [[ ${#boot_order[@]} -le 1 ]]; then return; fi

  # Restore the old boot order without the newly added entry
  old_boot_order="$(printf "%s" "${boot_order[@]:1}")"

  # And add the newly added entry to the end of the old boot order list
  efibootmgr -o "$old_boot_order,${boot_order[0]%%,}" -q
}

# Saves the boot index for the specified UKI path
_save_boot_index() {
  # Return if efibootmgr doesn't exist
  if ! _command_exists efibootmgr || ! _should_create_efi_entry; then return; fi

  local uki="$1"
  local tmp_index_file="$(_get_tmp_index_file "$uki")"
  
  # Get the boot order list
  [[ ${#boot_order[@]} -eq 0 ]] &&
  readarray -d ' ' boot_order < <(efibootmgr | grep -w "BootOrder" | sed -r 's/,/ /g;s/0+([0-9]+)/\1/g;s/BootOrder: //')

  local loader_path="$(_get_formatted_efi_path "$uki")"

  # Find the boot number for the specified loader path
  local boot_number=$(efibootmgr | \
          grep -Fw -e ${loader_path^^} | \
          cut -f1 -d ' ' | \
          sed -r 's/0+([0-9]+)/\1/g;s/Boot//;s/\*//')

  # Find the boot number index in boot order
  for boot_index in "${!boot_order[@]}"; do
    if [[ ${boot_order[$boot_index]} -eq $boot_number ]]; then
       local index="$boot_index"
       break
    fi
  done
  
  # Create the temp file and save the index
  (umask 077; touch "$tmp_index_file")    
  echo "$index" > "$tmp_index_file"
}

# Adds the EFI entry
_create_efi_entry() {
  # Return if efibootmgr doesn't exist
  if ! _command_exists efibootmgr || ! _should_create_efi_entry; then return; fi

  local uki loader_path pkgbase index
  uki="$1"

  # Set loader path with backslashes
  loader_path="$(_get_formatted_efi_path "$uki")"

  # Return if the entry exists
  if _efi_entry_exists "$loader_path"; then return; fi

  # Extract pkgbase from UKI file path
  pkgbase="$(_get_pkgbase_from_path "$uki")"

  local disk esp esp_number label
  # Get Efi System Partition. Example: /dev/nvme0n1p1
  esp="$(findmnt --real -nreo source "${ESP_MOUNT}")"

  # Get the found boot partition disk. Example: /dev/nvme0n1
  disk="/dev/$(lsblk -r -n -o PKNAME "${esp}")"

  # Get Efi System Partition number. Example: For /dev/nvme0n1p1, the number is 1
  esp_number="$(lsblk -r -n -o KNAME "${esp}")"
  esp_number="$(</sys/class/block/"${esp_number}"/partition)"

  # Set OS label to NAME + (pkgbase): Example: Arch Linux (linux)
  label="$(_get_label "$pkgbase")"

  # Get the temp index file
  local tmp_index_file=$(_get_tmp_index_file "$uki")
  if [[ -e $tmp_index_file ]]; then
    read index < "$tmp_index_file"
    rm -f "$tmp_index_file"
  fi

  echo -e "${B} ->${NC} Creating EFI entry ${G}${label}${NC}..."

  # Add the EFI entry
  efibootmgr --create \
    --disk "${disk}" \
    --part "${esp_number}" \
    --label "${label}" \
    --loader "${loader_path^^}" \
    ${index:+"--index" ${index}} \
    --unicode -q

  # Preserve old boot order
  [[ -z $index ]] && _preserve_boot_order || :
}

# Removes the EFI entry
_remove_efi_entry() {
  # Return if efibootmgr doesn't exist
  if ! _command_exists efibootmgr; then return; fi

  local uki loader_path pkgbase
  uki="$1"

  # Set loader path with backslashes
  loader_path="$(_get_formatted_efi_path "$uki")"

  # Find all known labels
  readarray -t labels < <(efibootmgr | \
    grep -Fw -e "$loader_path" -e "${loader_path^^}" | \
    sed 's/.*\*[[:blank:]]\(.*\)[[:blank:]]\(.*\)/\1/')

  # Find all known efibootmgr boot numbers for the specified UKI
  readarray -t boot_nums < <(efibootmgr | \
    grep -Fw -e "$loader_path" -e "${loader_path^^}" | \
    awk '{ print $1 }' | \
    sed -r 's/0+([0-9]+)/\1/g;s/Boot//;s/\*//')

  for label in "${labels[@]}"; do
    echo -e "${Y} ->${NC} Removing EFI entry ${Y}${label}${NC}..."
  done

  for boot_num in "${boot_nums[@]}"; do
    efibootmgr -b "$boot_num" -B > /dev/null
  done
}