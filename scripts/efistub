#!/usr/bin/env bash

set -e

# EFI System Partition. Examples: /dev/nvme0n1p1, /dev/sda1
# UKI files will be created on this partition
declare -g ESP

# EFI dir path of the directory where the UKI files are located. Example: esp/EFI/Linux
declare -g EFI_DIR

# ESP partition UUID
declare -g ESP_PARTUUID

# EFI System Partition mount point. Examples: /boot, /efi, /boot/efi
declare -g ESP_MOUNT

# Boot order
declare -a boot_order

# Sets EFI dir path
_set_efi_path() {
  local esp_path boot_path
  esp_path="$(bootctl -p)"
  boot_path="$(bootctl -x)"

  ESP_MOUNT="$esp_path"

  if [[ "$esp_path" != "$boot_path" ]]; then
    local boot_partition part_guid xbootldr_guid
    # XBOOTLDR GUID
    xbootldr_guid="bc13c2ff-59e6-4262-a352-b275fd6f7172"

    # BOOT partition. Example: /dev/nvme0n1p4
    boot_partition="$(findmnt --real -nreo source "${boot_path}")"

    # Partition GUID TYPE
    part_guid="$(partx -g -o TYPE "${boot_partition}")"

    # If boot partition has the XBOOTLDR GUID value, set the mount path
    if [[ "$part_guid" == "$xbootldr_guid" ]]; then
      ESP="$boot_partition"
      ESP_MOUNT="$boot_path"
    fi
  fi

  # Set the EFI dir where the UKI files will be saved
  EFI_DIR="${ESP_MOUNT}/EFI/Linux"

  [[ -z $ESP ]] && ESP="$(findmnt --real -nreo source "${ESP_MOUNT}")"

  # Set the ESP UUID
  ESP_PARTUUID="$(partx -g -o UUID "${ESP}")"

  # Trigger any potential automounts
  stat -- /boot /efi "$EFI_DIR" &>/dev/null || :
}

# Checks if efi entry exists
_efi_entry_exists() {
  local loader_path esp_partuuid
  loader_path="$1"
  efibootmgr | grep -w "$ESP_PARTUUID" | \
  grep -Fwq -e "${loader_path}" -e "${loader_path^^}"
}

# Formats the efi path to be readable by efibootmgr
_get_loader_path() {
  local efi
  efi="$1"

  # Set loader path wihout ESP mount point.
  efi_path="${efi#"$ESP_MOUNT"}"
  # Set loader path with backslashes
  efi_path="${efi_path//\//\\}"
  echo "$efi_path"
}

# Checks if loader file exists
_loader_file_exists() {
  local loader_path uki_name uki_path
  loader_path="$1"

  # Remove string prefix, before last \ char
  # \EFI\LINUX\ARCH-LINUX.EFI -> ARCH-LINUX.EFI
  uki_name="${loader_path##*\\}"

  # Lowercase name
  uki_name="${uki_name,,}"

  # Set the UKI file path
  uki_path="${EFI_DIR}/${uki_name}"

  # Check if the UKI file exists
  [[ -f $uki_path ]]
}

# Returns the EFI entry label
_get_label() {
  local pkgbase="$1"
  # Get OS NAME
  label="$(grep -Po '(?<=^NAME=").*(?=")' /etc/os-release)"
  # Set OS label to NAME + (pkgbase)
  label="${label} ($pkgbase)"
  echo "$label"
}

# Checks if the default entry should be readded with correct boot index
_should_readd_default_entry() {
  local index="$1"
  local loader_path="$2"

  local -a boot_nums
  readarray -t boot_nums < <(efibootmgr | \
    grep -w "$ESP_PARTUUID" | \
    grep -Fw -e "$loader_path" -e "${loader_path^^}" | \
    awk '{ print $1 }' | \
    sed -r 's/0+([0-9]+)/\1/g;s/Boot//;s/\*//' | \
    uniq -u)
  
  # Check if the default entry is not first in boot order
  [[ ! "${boot_nums[*]}" =~ "${boot_order[$index]}" ]]
}

# Adds the EFI entry
_create_efi_entry() {
  # Return if efibootmgr doesn't exist
  if ! _command_exists efibootmgr || ! _should_create_efi_entry; then return; fi

  local index=0
  local uki pkgbase loader_path default_entry
  uki="$1"
  pkgbase="$2"

  # Get current boot order
  readarray -td, boot_order < <(efibootmgr | \
    grep -w "BootOrder" | \
    sed -r 's/0+([0-9]+)/\1/g;s/BootOrder: //')

  # Set loader path with backslashes
  loader_path="$(_get_loader_path "$uki")"

  # Get default entry
  local default_entry="$(_get_default_entry)"

  # If the default entry exists and is not default, remove it first
  if [[ $default_entry == "$pkgbase" ]]; then
    if [[ ! $loader_path =~ "${pkgbase}.efi" ]] && \
      _has_default_initramfs "$pkgbase"; then index=1; fi
    if _should_readd_default_entry "$index" "$loader_path"; then
      # Remove old efi entry
      _remove_efi_entry "$uki"
    fi
  elif _should_append; then
    # Preserve old boot order
    index="${#boot_order[@]}"
  elif _pkgbase_exists "$default_entry" && [[ ${#boot_order[@]} -gt 1 ]]; then
    # If append is disabled and default_entry is specified,
    # add new EFI entry to the second or third position
    if _has_fallback_initramfs "$default_entry" && \
      _should_generate_fallback; then index=2; else index=1; fi
  fi

  # If entry exists, do not create it
  if _efi_entry_exists "$loader_path"; then return; fi

  # If UKI file is fallback, append the -fallback string to the pkgbase name
  [[ $uki =~ "$pkgbase-fallback.efi" ]] && pkgbase="${pkgbase}-fallback"

  local disk esp esp_number label
  # Get Efi System Partition. Example: /dev/nvme0n1p1
  esp="$(findmnt --real -nreo source "${ESP_MOUNT}")"

  # Get the found boot partition disk. Example: /dev/nvme0n1
  disk="/dev/$(lsblk -r -n -o PKNAME "${esp}")"

  # Get Efi System Partition number. Example: For /dev/nvme0n1p1, the number is 1
  esp_number="$(lsblk -r -n -o KNAME "${esp}")"
  esp_number="$(</sys/class/block/"${esp_number}"/partition)"

  # Set OS label to NAME + (pkgbase): Example: Arch Linux (linux)
  label="$(_get_label "$pkgbase")"

  echo -e "${B} ->${NC} Creating EFI entry ${G}${label}${NC}..."

  # Add the EFI entry
  efibootmgr --create \
    --disk "${disk}" \
    --part "${esp_number}" \
    --index "${index:-0}" \
    --label "${label}" \
    --loader "${loader_path^^}" \
    --unicode -q
}

# Removes the EFI entry
_remove_efi_entry() {
  # Return if efibootmgr doesn't exist
  if ! _command_exists efibootmgr; then return; fi

  local uki loader_path pkgbase
  uki="$1"

  # Set loader path with backslashes
  loader_path="$(_get_loader_path "$uki")"

  # Find all known labels
  readarray -t labels < <(efibootmgr | \
    grep -w "$ESP_PARTUUID" | \
    grep -Fw -e "$loader_path" -e "${loader_path^^}" | \
    sed 's/.*\*[[:blank:]]\(.*\)[[:blank:]]\(.*\)/\1/')

  # Find all known efibootmgr boot numbers for the specified UKI
  readarray -t boot_nums < <(efibootmgr | \
    grep -w "$ESP_PARTUUID" | \
    grep -Fw -e "$loader_path" -e "${loader_path^^}" | \
    awk '{ print $1 }' | \
    sed -r 's/0+([0-9]+)/\1/g;s/Boot//;s/\*//')

  for label in "${labels[@]}"; do
    echo -e "${Y} ->${NC} Removing EFI entry ${Y}${label}${NC}..."
  done

  for boot_num in "${boot_nums[@]}"; do
    efibootmgr -b "$boot_num" -B > /dev/null
  done
}

# Removes orphaned EFI entries
_remove_orphaned_efi_entries() {
    # Return if efibootmgr doesn't exist
  if ! _command_exists efibootmgr; then exit; fi

  local search="${EFI_DIR#$ESP_MOUNT}/arch-"
  search="${search//\//\\}"

  # Get all uniqe loader paths
  readarray -t loader_paths < <(efibootmgr | \
    grep -w "$ESP_PARTUUID" | grep -Fi "$search" | \
    sed 's/.*(\(.*\))/\1/' | uniq -u)

  for loader_path in "${loader_paths[@]}"; do
    if ! _loader_file_exists "$loader_path"; then
      # Get the boot number
      readarray -t boot_nums < <(efibootmgr | \
        grep -w "$ESP_PARTUUID" | \
        grep -Fw "$loader_path" | \
        awk '{ print $1 }' | \
        sed -r 's/0+([0-9]+)/\1/g;s/Boot//;s/\*//')

      # Get the labels
      readarray -t labels < <(efibootmgr | \
        grep -w "$ESP_PARTUUID" | \
        grep -Fw "$loader_path" | \
        sed 's/.*\*[[:blank:]]\(.*\)[[:blank:]]\(.*\)/\1/')

      for label in "${labels[@]}"; do
        echo -e "${Y} ->${NC} Removing EFI entry ${Y}${label}${NC}..."
      done

      # Remove the EFI entries
      for boot_num in "${boot_nums[@]}"; do
        efibootmgr -b "$boot_num" -B > /dev/null
      done
    fi
  done

  # One shot function, just exit
  exit
}