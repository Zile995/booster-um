#!/usr/bin/env bash

set -e

# Generates one UKI
_generate_uki() {
  # arguments
  local pkgbase="$1"

  # systemd-ukify paths
  local CMDLINE SPLASH UNAME VMLINUZ UKI INITRD
  UNAME="$2"

  _print_divider
  $_msg_h2_info "Generating UKI for ${G}${pkgbase} ($UNAME)${NC}..."

  # vmlinuz path
  VMLINUZ="/boot/vmlinuz-${pkgbase}"

  # Get booster config for the pkgbase
  local booster_config="$(_get_booster_config "$pkgbase")"

  # booster initramfs
  local -a booster_inits=()
  if _has_default_initramfs "$pkgbase"; then booster_inits+=("/boot/booster-${pkgbase}.img"); fi
  if [[ $booster_config =~ "universal: true" ]] || _should_generate_fallback && _has_fallback_initramfs "$pkgbase"; then
    booster_inits+=("/boot/booster-${pkgbase}-fallback.img")
  fi

  # Return if required initramfs files do not exist
  if ! stat -- "${booster_inits[@]}" > /dev/null 2>&1 || [[ ! -e $VMLINUZ ]]; then
    $_msg_error "Unable to generate UKI for ${R}${pkgbase}${NC}..."
    return
  fi

  # Fix the initramfs file permissions if necessary
  [[ ! $(stat -c %a "${booster_inits[@]}" | grep -w "600" | wc -l) -eq "${#booster_inits[@]}" ]] &&
    chmod -f 600 -- "${booster_inits[@]}"

  # splash file
  SPLASH="$(_get_splash_path "$pkgbase")"

  # microcodes
  local -a microcodes
  if _include_microcode; then
    mapfile -d '' microcodes < <(find /boot -name '*-ucode.img' -type f -print0)
  fi

  # UKI file path, create EFI dir if it doesn't exist
  [[ ! -d $EFI_DIR ]] && mkdir -p "$EFI_DIR"
  local uki_path="${EFI_DIR}/${os_id}-${pkgbase}"

  local -a sign_args=()
  if [[ $SBSIGN -eq 0 ]] && _should_sign_uki; then
    local pcr_banks="$(_get_sbsign_property pcr_banks)"
    local pcr_private_key="$(_get_sbsign_property pcr_private_key)"
    local pcr_public_key="$(_get_sbsign_property pcr_public_key)"
    local secureboot_private_key="$(_get_sbsign_property secureboot_private_key)"
    local secureboot_certificate="$(_get_sbsign_property secureboot_certificate)"

    sign_args+=(${pcr_banks:+"--pcr-banks=$pcr_banks"} \
                ${pcr_private_key:+"--pcr-private-key=$pcr_private_key"} \
                ${pcr_public_key:+"--pcr-public-key=$pcr_public_key"} \
                ${secureboot_private_key:+"--secureboot-private-key=$secureboot_private_key"} \
                ${secureboot_certificate:+"--secureboot-certificate=$secureboot_certificate"})
  fi

  for booster_initramfs in "${booster_inits[@]}"; do
    # initrd temp path
    INITRD="$(mktemp -t 'initrd.XXXXXX')"

    # Create one initrd
    cat -- "${microcodes[@]}" "$booster_initramfs" > "$INITRD"

    # Set UKI fallback path
    [[ $booster_initramfs =~ "$pkgbase-fallback.img" ]] && 
      uki_path="${uki_path}-fallback" && local fallback=0

    # cmdline file path or cmdline kernel parameters
    CMDLINE="$(_get_cmdline $pkgbase "${fallback:-1}")"

    # Set the UKI file with .efi exstension
    UKI="${uki_path}.efi"

    # Build the UKI file, sign it and create EFI entry
    ukify build \
      --uname="$UNAME" \
      --linux="$VMLINUZ" \
      --initrd="$INITRD" \
      ${CMDLINE:+"--cmdline=$CMDLINE"} \
      ${SPLASH:+"--splash=$SPLASH"} "${sign_args[@]}" \
      --output="$UKI" | tail -n 1 | nl -bn -w1 &&
      _sign_uki "$UKI" &&
      _create_efi_entry "$UKI" "$pkgbase" || :

    # Remove the old initrd after creating the UKI file
    rm -f "$INITRD"
  done

  # Remove the leftovers (vmlinuz, booster initramfs and other files)
  _remove_leftovers "$pkgbase"

  divider=0
}

# Generates UKI file for specified kernel package names
_generate_kernel_uki() {
  local uname
  local -a pids
  local -a input_pkgbases
  local -a valid_pkgbases=()

  readarray -t input_pkgbases < <(printf '%s\n' "$@" | sort -u)

  # First remove all failed .booster initramfs
  rm -f /boot/.booster-*.img*

  for pkgbase in "${input_pkgbases[@]}"; do
    _check_pkgbase "$pkgbase" || continue

    # Add the valid pkgbase
    valid_pkgbases+=("$pkgbase")

    # Get the uname
    uname="${kernels[$pkgbase]}"

    # Generate the initramfs
    if _low_memory; then
      _generate_initramfs "$pkgbase" "$uname"
    else
      _generate_initramfs "$pkgbase" "$uname" & pids+=( $! )
    fi
  done

  # Wait for all background jobs
  for pid in "${pids[@]}"; do
    wait "$pid"
  done

  _print_divider && divider=1

  for pkgbase in "${valid_pkgbases[@]}"; do
    # Get the uname
    uname="${kernels[$pkgbase]}"

    # Generate and sign the UKI file
    _generate_uki "$pkgbase" "$uname"
  done
}

# Generate initramfs for specified kernel path
_generate_initramfs() {
  local pkgbase="$1"
  local uname="$2"

  $_msg_h2_info "Generating initramfs for ${G}${pkgbase}${NC}..."

  # Install the vmlinuz
  if ! _install_vmlinuz "$pkgbase" "$uname"; then return 1; fi

  if _has_default_initramfs "$pkgbase"; then
    # Set the booster initramfs file path
    local initramfs="/boot/booster-${pkgbase}.img"

    # Get booster config
    local booster_config="$(_get_booster_config "$pkgbase")"

    # Set booster args
    local -a booster_args=(build \
                           --force \
                           ${booster_config:+"--config=/dev/stdin"} \
                           --kernel-version "$uname" \
                          "$initramfs")

    # Generate initramfs
    if ! echo "$booster_config" | booster "${booster_args[@]}"; then
      $_msg_error "Unable to generate initramfs for ${R}${pkgbase}${NC}..."
      _remove_leftovers "$pkgbase"
      return 1
    fi

    # Set the permission to 600 for the initramfs file
    chmod -f 600 -- "$initramfs"
  fi

   # Generate the fallback initramfs
  _generate_fallback_initramfs "$pkgbase" "$uname"
}

# Installs the vmlinuz
_install_vmlinuz() {
  local pkgbase="$1"
  local uname="$2"

  local boot_vmlinuz="/boot/vmlinuz-${pkgbase}"
  [[ -e $boot_vmlinuz ]] && return

  local kernel="/usr/lib/modules/${uname}"
  local module_vmlinuz="${kernel}/vmlinuz"
  if [[ ! -e $module_vmlinuz ]]; then
    $_msg_error "Unable to find vmlinuz for ${R}${pkgbase}${NC}..."
    return 1
  fi

  # Install the vmlinuz
  install -Dm644 "$module_vmlinuz" "$boot_vmlinuz"
}

# Generates fallback initramfs
_generate_fallback_initramfs() {
  local pkgbase="$1"

  local booster_config="$(_get_booster_config "$pkgbase")"

  if [[ ! $booster_config =~ "universal: true" ]]; then
    if ! _should_generate_fallback || ! _has_fallback_initramfs "$pkgbase"; then
      return;
    fi
  fi

  local uname="$2"
  local fallback_initramfs="/boot/booster-${pkgbase}-fallback.img"

  # Set booster args
  local -a booster_args=(build \
                         --force \
                         ${booster_config:+"--config=/dev/stdin"} \
                         --universal \
                         --kernel-version "$uname" \
                         "$fallback_initramfs")

  # Generate the fallback initramfs
  if ! echo "$booster_config" | booster "${booster_args[@]}"; then 
    $_msg_error "Unable to generate fallback initramfs for ${R}${pkgbase}${NC}..."
    _remove_leftovers "$pkgbase"
    return 1
  fi

  # Set the permission to 600 for the initramfs file
  chmod -f 600 -- "$fallback_initramfs"
}

# Regenerates UKI files for all installed kernels
_regenerate_all() {
  [[ ${#kernels[@]} -eq 0 ]] && {
    $_msg_error "${W}Unable to regenerate all UKI files, ${R}there are no kernels${NC}${W}. Please install at least one kernel."
    exit
  }
  $_msg_h1_info "Generating UKI files for all installed kernels..."
  _generate_kernel_uki "${!kernels[@]}"
}

# Generates UKI files on pacman update
_generate_on_update() {
  local -a sorted_pkgbases=("$@")

  for pkgbase in "${sorted_pkgbases[@]}"; do
    # Genearate UKI file for updated kernel
    _generate_fallback_initramfs "$pkgbase" "${kernels[$pkgbase]}"
    _generate_uki "$pkgbase" "${kernels[$pkgbase]}"
  done
}
