#!/usr/bin/env bash

set -e

# Common paths
declare -g CMDLINE=/etc/kernel/cmdline

# Generates one UKI
_generate_uki() {
  # arguments
  local pkgbase="$1"

  # systemd-ukify paths
  local SPLASH UNAME VMLINUZ UKI INITRD
  UNAME="$2"

  echo -e "${B}==>${NC} Generating UKI for ${G}${pkgbase}${NC}..."

  # Splash file
  SPLASH="$(_get_splash_path)"

  # vmlinuz path
  VMLINUZ="/boot/vmlinuz-${pkgbase}"

  # initrd path
  INITRD="/boot/.initrd-${pkgbase}"

  # microcodes
  mapfile -d '' microcodes < <(find /boot -name '*-ucode.img' -type f -print0)

  # booster initramfs
  local booster_inits=("/boot/booster-${pkgbase}.img")
  if _should_generate_fallback; then
    booster_inits+=("/boot/booster-${pkgbase}-fallback.img")
  fi

  # Return if required initramfs files do not exist
  if ! stat -- "${booster_inits[@]}" > /dev/null 2>&1 || [[ ! -e $VMLINUZ ]]; then
    echo -e "${R}==>${NC} Unable to generate UKI for ${R}${pkgbase}${NC}..."
    return
  fi

  # Copy the current cmdline if it doesn't exist
  [[ ! -e $CMDLINE ]] && cp /proc/cmdline "$CMDLINE"

  # UKI file path, create EFI dir if it doesn't exist
  [[ ! -e $EFI_DIR ]] && mkdir -p "$EFI_DIR"
  local uki_path="${EFI_DIR}/arch-${pkgbase}"

  local -a sign_args=()
  if [[ $sbsign -eq 1 ]] && _should_sign_uki; then
    local pcr_banks="$(_get_sbsign_property pcr_banks)"
    local pcr_private_key="$(_get_sbsign_property pcr_private_key)"
    local pcr_public_key="$(_get_sbsign_property pcr_public_key)"
    local secureboot_private_key="$(_get_sbsign_property secureboot_private_key)"
    local secureboot_certificate="$(_get_sbsign_property secureboot_certificate)"

    sign_args+=(${pcr_banks:+"--pcr-banks=$pcr_banks"} \
                ${pcr_private_key:+"--pcr-private-key=$pcr_private_key"} \
                ${pcr_public_key:+"--pcr-public-key=$pcr_public_key"} \
                ${secureboot_private_key:+"--secureboot-private-key=$secureboot_private_key"} \
                ${secureboot_certificate:+"--secureboot-certificate=$secureboot_certificate"})
  fi

  for init_id in "${!booster_inits[@]}"; do
    local booster_initramfs="${booster_inits[init_id]}"

    # Create one initrd
    cat -- "${microcodes[@]}" "$booster_initramfs" > "$INITRD"

    # Set UKI fallback path
    [[ $init_id -gt 0 ]] && uki_path="${uki_path}-fallback"

    # Set the UKI file with .efi exstension
    UKI="${uki_path}.efi"

    # Build the UKI file, sign it and create EFI entry
    /usr/lib/systemd/ukify build \
      --uname="$UNAME" \
      --linux="$VMLINUZ" \
      --initrd="$INITRD" \
      --cmdline=@"$CMDLINE" \
      ${SPLASH:+"--splash=$SPLASH"} "${sign_args[@]}" \
      --output="$UKI" | tail -n 1 && \
      _sign_uki "$UKI" && _create_efi_entry "$UKI"

    # Remove the old initrd after creating the UKI file
    rm -f "$INITRD"
  done

  # Remove the leftovers (vmlinuz and booster initramfs)
  _remove_leftovers "$pkgbase" 1
}

# Generates UKI file for specified kernel package name
_generate_kernel_uki() {
  local pkgbase="$1"
  _check_pkgbase "$pkgbase"

  # Get the index of pkgbase
  index="$(_get_array_index pkgbases "$pkgbase")"
  local kernel="${kernels[$index]}"

  local uname="${kernel##/usr/lib/modules/}"

  # Generate initramfs
  _generate_initramfs "$kernel" || return

  # Generate and sign UKI file
  _generate_uki "$pkgbase" "$uname"
}

# Generates UKI files for all installed kernels
_generate_all_uki() {
  local uname
  for kernel in "${kernels[@]}"; do
    read -r pkgbase < "${kernel}/pkgbase"
    uname="${kernel##/usr/lib/modules/}"

    # Generate and sign UKI file
    _generate_uki "$pkgbase" "$uname"
  done
}

# Generates initramfs and fallback initramfs
_regenerate_images() {
  local pids=()
  for kernel in "${kernels[@]}"; do
    _generate_initramfs "$kernel" & pids+=( $! )
  done

  # Wait for all background jobs
  for pid in "${pids[@]}"; do
    wait "$pid"
  done
}

# Generate initramfs for specified kernel path
_generate_initramfs() {
  local kernel="$1"
  read -r pkgbase < "${kernel}/pkgbase"
  local uname="${kernel##/usr/lib/modules/}"
  local initramfs="/boot/booster-${pkgbase}.img"

  echo -e "${B}==>${NC} Generating initramfs for ${G}${pkgbase}${NC}..."

  # Install the vmlinuz
  if ! _install_vmlinuz "$pkgbase" "$uname"; then return 1; fi

  # Generate initramfs
  if ! booster build --force --kernel-version "$uname" "$initramfs"; then
    echo -e "${R}==>${NC} Unable to generate initramfs for ${R}${pkgbase}${NC}..."
    _remove_leftovers "$pkgbase" 1
    return 1
  fi

  # Generate fallback initramfs
  _generate_fallback_initramfs "$pkgbase" "$uname"
}

# Installs the vmlinuz
_install_vmlinuz() {
  local pkgbase="$1"
  local uname="$2"

  local boot_vmlinuz="/boot/vmlinuz-${pkgbase}"
  [[ -e $boot_vmlinuz ]] && return

  local kernel="/usr/lib/modules/${uname}"
  local module_vmlinuz="${kernel}/vmlinuz"
  if [[ ! -e $module_vmlinuz ]]; then
    echo -e "${R}==>${NC} Unable to find vmlinuz for ${R}${pkgbase}${NC}..."
    return 1
  fi

  # Install the vmlinuz
  install -Dm644 "$module_vmlinuz" "$boot_vmlinuz"
}

# Generates fallback initramfs
_generate_fallback_initramfs() {
  local uname pkgbase
  pkgbase="$1"
  uname="$2"
  if _should_generate_fallback; then
    booster build --force --universal --kernel-version "$uname" "/boot/booster-${pkgbase}-fallback.img"
  fi
}

# Generates booster initramfs, vmlinuz and UKI files for all kernels
_generate_all_files() {
  echo -e "${B}::${W} Generating initramfs for all installed kernels...${NC}"
  _regenerate_images || :
  echo -e "${B}::${W} Generating UKI files for all installed kernels...${NC}"
  _generate_all_uki
}
