#!/usr/bin/env bash

set -e

# Flag which controls removal of EFI entries when UKI is set to be removed
if [[ -z $REMOVE_EFI ]]; then
  REMOVE_EFI=0
fi

# Removes the cmdline for specified kernel
_remove_cmdline() {
  local pkgbase="$1"

  # cmdline path
  local cmdline_path="/etc/kernel/${pkgbase}.cmdline"

  # If the cmdline path exists, remove it
  if [[ -e $cmdline_path ]]; then
    echo -e "${Y}==>${NC} Removing cmdline ${Y}$cmdline_path${NC}..." >&2
    rm -f "cmdline_path"
  fi
}

# Removes the leftovers from /boot
_remove_boot_leftovers() {
  local pkgbase="$1"

  echo -e "${Y}==>${NC} Removing ${G}${pkgbase}${NC} leftovers from ${Y}/boot${NC}..."

  # Remove leftovers from /boot dir
  rm -f /boot/.booster*
  rm -f /boot/vmlinuz-"${pkgbase}"
  rm -f /boot/booster-"${pkgbase}"{-fallback.img,.img}
}

# Removes other leftovers (efi entries, cmdlines, fallback images)
_remove_other_leftovers() {
  local pkgbase="$1"

  local uki="${EFI_DIR}/arch-${pkgbase}.efi"
  local fallback_uki="${EFI_DIR}/arch-${pkgbase}-fallback.efi"

  # Remove fallback UKI files in ESP if fallback generation is not enabled
  if ! _should_generate_fallback && [[ -f $fallback_uki ]]; then
    _remove_from_db "$fallback_uki"
    _remove_efi_entry "$fallback_uki"
    echo -e "${Y}==>${NC} Removing ${Y}${fallback_uki}${NC} file..."
    rm -f "$fallback_uki" && local fallback_removed=1
  fi

  if [[ ! "${initramfs_config[$pkgbase]}" =~ "default" && -f $uki ]]; then
    _remove_from_db "$uki"
    _remove_efi_entry "$uki"
    echo -e "${Y}==>${NC} Removing ${Y}${uki}${NC} file..."
    rm -f "$uki" && local default_removed=1
  fi

  if [[ ! "${initramfs_config[$pkgbase]}" =~ "fallback" && -f $fallback_uki && -z $fallback_removed ]]; then
    _remove_from_db "$fallback_uki"
    _remove_efi_entry "$fallback_uki"
    echo -e "${Y}==>${NC} Removing ${Y}${fallback_uki}${NC} file..."
    rm -f "$fallback_uki" && local fallback_removed=1
  fi

  # Remove efi entry if efistub is not enabled
  if ! _should_create_efi_entry; then
    [[ -z $default_removed ]] && _remove_efi_entry "$uki"
    [[ -z $fallback_removed ]] && _remove_efi_entry "$fallback_uki"
  fi

  # Remove the pkgbase cmdline if cmdline per kernel is not enabled
  if ! _cmdline_per_kernel; then
    _remove_cmdline "$pkgbase"
  fi
}

# Removes all known vmlinuz and initramfs files for specified kernel
_remove_leftovers() {
  local pkgbase="$1"

  if ! _should_remove_leftovers; then return; fi

  # Remove leftovers from /boot dir
  _remove_boot_leftovers "$pkgbase"

  # Remove other leftovers (efi entries, cmdlines, fallback images)
  _remove_other_leftovers "$pkgbase"
}

# Removes all known UKI files from esp/EFI/Linux dir
_remove_all_uki() {
  echo -e "${Y}::${NC} Removing ${Y}all known UKI files${NC}..."
  for pkgbase in "${pkgbases[@]}"; do
    # Remove the UKI file, vmlinuz and initramfs
    _remove_uki "$pkgbase"
  done
}

# Removes esp/EFI/Linux dir and all files from the sbctl database
_cleanup() {
  shopt -s nullglob

  echo -e "${Y}::${NC} Removing ${Y}all initramfs*, booster*, vmlinuz*${NC} files from ${Y}/boot${NC}..."

  # Remove all initramfs-*, booster-*, vmlinuz-* files
  rm -f /boot/{.initrd,initramfs,booster,vmlinuz}*

  # Store all EFI files in array
  local efi_files=("${EFI_DIR}"/*.efi)

  for efi_file in "${efi_files[@]}"; do
    # Remove the file from sbctl database
    _remove_from_db "$efi_file"

    # Remove EFI entries
    _remove_efi_entry "$efi_file"
  done

  # Remove esp/EFI/Linux dir
  echo -e "${Y}==>${NC} Removing ${Y}${EFI_DIR}${NC} dir..."
  rm -rf "$EFI_DIR"

  # Remove *.cmdline files
  echo -e "${Y}==>${NC} Removing all ${Y}.cmdline${NC} files from ${Y}/etc/kernel${NC}..."
  rm -f "/etc/kernel/*.cmdline"

  shopt -u nullglob
}

# Removes UKI file for specified kernel
_remove_uki() {
  local pkgbase="$1"
  _check_pkgbase "$pkgbase"

  # Remove leftovers from /boot dir 
  _remove_boot_leftovers "$pkgbase"

  # Store all UKI files in array
  readarray -t uki_files < <(find "${EFI_DIR}" \
    -type f \
    -name "arch-${pkgbase}.efi" -o \
    -name "arch-${pkgbase}-fallback.efi" 2> /dev/null)

  for uki in "${uki_files[@]}"; do
    # Remove the UKI file from sbctl database
    echo -e "${Y}==>${NC} Removing ${Y}${uki}${NC} file..."
    _remove_from_db "$uki"

    # Remove the UKI file
    rm -f "$uki"

    # Remove the cmdline file
    rm -f "/etc/kernel/${pkgbase}.cmdline"

    # Remove the EFI entry
    if [[ $REMOVE_EFI -eq 0 ]]; then _remove_efi_entry "$uki"; fi
  done
}