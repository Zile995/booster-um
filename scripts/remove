#!/usr/bin/env bash

set -e

# Flag which controls removal of EFI entries when UKI is set to be removed
if [[ -z $REMOVE_EFI ]]; then
  REMOVE_EFI=0
fi

# Removes the cmdline for specified kernel
_remove_cmdline() {
  local pkgbase="$1"

  # cmdline paths
  local cmdline_paths=(/etc/kernel/"${pkgbase}"{-fallback.cmdline,.cmdline})

  for cmdline_path in "${cmdline_paths[@]}"; do
    # If the cmdline path exists, remove it
    if [[ -f $cmdline_path ]]; then
      $_msg_warn "Removing cmdline ${Y}${cmdline_path}${NC}..."
      rm -f "$cmdline_path"
    fi
  done
}

# Removes the leftovers from /boot
_remove_boot_leftovers() {
  local pkgbase="$1"

  $_msg_warn "Removing ${G}${pkgbase}${NC} leftovers from ${Y}/boot${NC}..."

  # Remove leftovers from /boot dir
  rm -f /boot/.booster*
  rm -f /boot/vmlinuz-"${pkgbase}"
  rm -f /boot/booster-"${pkgbase}"{-fallback.img,.img}
}

# Removes other leftovers (efi entries, cmdlines, fallback images)
_remove_other_leftovers() {
  local pkgbase="$1"

  local uki="${EFI_DIR}/arch-${pkgbase}.efi"
  local fallback_uki="${EFI_DIR}/arch-${pkgbase}-fallback.efi"

  # Remove fallback UKI files in ESP if fallback generation is not enabled
  if ! _should_generate_fallback && [[ -f $fallback_uki ]]; then
    _remove_from_db "$fallback_uki"
    _remove_efi_entry "$fallback_uki"
    $_msg_warn "Removing ${Y}${fallback_uki}${NC} file..."
    rm -f "$fallback_uki" && local fallback_removed=1
  fi

  if ! _has_default_initramfs "$pkgbase" && [[ -f $uki ]]; then
    _remove_from_db "$uki"
    _remove_efi_entry "$uki"
    $_msg_warn "Removing ${Y}${uki}${NC} file..."
    rm -f "$uki" && local default_removed=1
  fi

  if ! _has_fallback_initramfs "$pkgbase" && [[ -f $fallback_uki && -z $fallback_removed ]]; then
    _remove_from_db "$fallback_uki"
    _remove_efi_entry "$fallback_uki"
    $_msg_warn "Removing ${Y}${fallback_uki}${NC} file..."
    rm -f "$fallback_uki" && local fallback_removed=1
  fi

  # Remove efi entry if efistub is not enabled
  if ! _should_create_efi_entry; then
    [[ -z $default_removed ]] && _remove_efi_entry "$uki"
    [[ -z $fallback_removed ]] && _remove_efi_entry "$fallback_uki"
  fi

  # Remove the pkgbase cmdline if cmdline per kernel is not enabled
  if ! _cmdline_per_kernel; then
    _remove_cmdline "$pkgbase"
  fi
}

# Removes all known vmlinuz and initramfs files for specified kernel
_remove_leftovers() {
  local pkgbase="$1"

  if ! _should_remove_leftovers; then return; fi

  # Remove leftovers from /boot dir
  _remove_boot_leftovers "$pkgbase"

  # Remove other leftovers (efi entries, cmdlines, fallback images)
  _remove_other_leftovers "$pkgbase"
}

# Removes all known UKI files from esp/EFI/Linux dir
_remove_all_uki() {
  $_msg_h1_warn "Removing UKI files for all installed kernels..."
  _print_divider
  # Remove the UKI files, vmlinuz and initramfs for all installed kernels
  _remove_uki "${sorted_pkgbases[@]}"
}

# Removes esp/EFI/Linux dir and all files from the sbctl database
_cleanup() {
  shopt -s nullglob

  $_msg_h1_warn "Removing ${Y}all initramfs*, booster*, vmlinuz*${W} files from ${Y}/boot${W}..."
  _print_divider

  # Remove all initramfs-*, booster-*, vmlinuz-* files
  rm -f /boot/{.initrd,initramfs,booster,vmlinuz}*

  # Store all EFI files in array
  local efi_files=("${EFI_DIR}"/*.efi)

  $_msg_h2_warn "Removing ${Y}${EFI_DIR}${NC} dir and all its files..."

  for efi_file in "${efi_files[@]}"; do
    # Remove the file from sbctl database
    _remove_from_db "$efi_file"

    # Remove EFI entries
    _remove_efi_entry "$efi_file"
  done

  # Remove esp/EFI/Linux dir
  rm -rf "$EFI_DIR"

  # Remove *.cmdline files
  $_msg_warn "Removing all ${Y}.cmdline${NC} files from ${Y}/etc/kernel${NC}..."
  rm -f "/etc/kernel/*.cmdline"

  shopt -u nullglob
}

# Removes UKI file for specified kernels
_remove_uki() {
  local -a input_pkgbases
  readarray -t input_pkgbases < <(printf '%s\n' "$@" | sort -u)

  divider=1

  for pkgbase in "${input_pkgbases[@]}"; do
    # Check the pkgbase
    _check_pkgbase "$pkgbase" || continue

    _print_divider
    $_msg_h2_warn "Removing UKI for ${G}${pkgbase} (${kernels[$pkgbase]})${NC}..."

    # Remove leftovers from /boot dir
    _remove_boot_leftovers "$pkgbase"

    # Store all UKI files in array
    readarray -t uki_files < <(find "${EFI_DIR}" \
      -type f \
      -name "arch-${pkgbase}.efi" -o \
      -name "arch-${pkgbase}-fallback.efi" 2> /dev/null)

    for uki in "${uki_files[@]}"; do
      # Remove the UKI file from sbctl database
      $_msg_warn "Removing ${Y}${uki}${NC} file..."
      _remove_from_db "$uki"

      # Remove the UKI file
      rm -f "$uki"

      # Remove the cmdline file
      _remove_cmdline "$pkgbase"

      # Remove the EFI entry
      if [[ $REMOVE_EFI -eq 0 ]]; then _remove_efi_entry "$uki"; fi
    done

    divider=0
  done
}